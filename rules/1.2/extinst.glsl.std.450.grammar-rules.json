{
  "source_grammar": "extinst.glsl.std.450.grammar.json",
  "rule_types": {
    "type_constraint": "The operand must be within the set of types as defined in 2.2.2.",
    "base_type": "Constraints the base type of this operand to be in this set of types",
    "result_equal_type": "Signals that an operand needs to have the same type as the result of that instruction",
    "component_count_equal" : "The number of components of a and b need to be equal.",
    "component_width_equal" : "The component width of a and b need to be equal.",
    "component_type_equal" : "The component type of both operands need to be equal",
    "is_signed" : "signals the signedness of a type.",
    "component_width" : "Specifies a list of allowed component widths",
    "component_count" : "Specifies a list of allowed number of components"
  },
  "instructions": [
    {
      "opname": "Round",
      "opcode": 1,
      "operand_mapping": [
        "x"
      ],
      "rules": [        
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "RoundEven",
      "opcode": 2,
      "operand_mapping": [
        "x"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Trunc",
      "opcode": 3,
      "operand_mapping": [
        "x"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "FAbs",
      "opcode": 4,
      "operand_mapping": [
        "x"
      ],
      "rules": [        
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "SAbs",
      "opcode": 5,
      "operand_mapping": [
        "x"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["Integer"]}},
        {"result_equal_type" : "x"},     
        {"component_count_equal" : {"a" : "Result", "b" : "x"}},
        {"component_width_equal" : {"a" : "Result", "b" : "x"}}
      ]
    },
    {
      "opname": "FSign",
      "opcode": 6,
      "operand_mapping": [
        "x"
      ],
      "rules": [        
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "SSign",
      "opcode": 7,
      "operand_mapping": [
        "x"
      ],
      "rules": [       
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["Integer"]}},
        {"result_equal_type" : "x"},
        {"component_count_equal" : {"a" : "Result", "b" : "x"}},
        {"component_width_equal" : {"a" : "Result", "b" : "x"}}
      ]
    },
    {
      "opname": "Floor",
      "opcode": 8,
      "operand_mapping": [
        "x"
      ],
      "rules": [        
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Ceil",
      "opcode": 9,
      "operand_mapping": [
        "x"
      ],
      "rules": [        
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Fract",
      "opcode": 10,
      "operand_mapping": [
        "x"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Radians",
      "opcode": 11,
      "operand_mapping": [
        "degrees"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "degrees" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "degrees", "base_types" : ["FloatingPoint"]}},
        {"component_width" : {"operand" : "degrees", "allowed" : [16, 32]}},
        {"result_equal_type" : "degrees"}
      ]
    },
    {
      "opname": "Degrees",
      "opcode": 12,
      "operand_mapping": [
        "radians"
      ],
      "rules": [        
        {"type_constraint" : {"operand" : "radians" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "radians", "base_types" : ["FloatingPoint"]}},
        {"component_width" : {"operand" : "radians", "allowed" : [16, 32]}},
        {"result_equal_type" : "radians"}
      ]
    },
    {
      "opname": "Sin",
      "opcode": 13,
      "operand_mapping": [
        "x"
      ],
      "rules": [        
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"component_width" : {"operand" : "x", "allowed" : [16, 32]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Cos",
      "opcode": 14,
      "operand_mapping": [
        "x"
      ],
      "rules": [        
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"component_width" : {"operand" : "x", "allowed" : [16, 32]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Tan",
      "opcode": 15,
      "operand_mapping": [
        "x"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"component_width" : {"operand" : "x", "allowed" : [16, 32]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Asin",
      "opcode": 16,
      "operand_mapping": [
        "x"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"component_width" : {"operand" : "x", "allowed" : [16, 32]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Acos",
      "opcode": 17,
      "operand_mapping": [
        "x"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"component_width" : {"operand" : "x", "allowed" : [16, 32]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Atan",
      "opcode": 18,
      "operand_mapping": [
        "y_over_x"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "y_over_x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "y_over_x", "base_types" : ["FloatingPoint"]}},
        {"component_width" : {"operand" : "y_over_x", "allowed" : [16, 32]}},
        {"result_equal_type" : "y_over_x"}
      ]
    },
    {
      "opname": "Sinh",
      "opcode": 19,
      "operand_mapping": [
        "x"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"component_width" : {"operand" : "x", "allowed" : [16, 32]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Cosh",
      "opcode": 20,
      "operand_mapping": [
        "x"
      ],
      "rules": [        
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"component_width" : {"operand" : "x", "allowed" : [16, 32]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Tanh",
      "opcode": 21,
      "operand_mapping": [
        "x"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"component_width" : {"operand" : "x", "allowed" : [16, 32]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Asinh",
      "opcode": 22,
      "operand_mapping": [
        "x"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"component_width" : {"operand" : "x", "allowed" : [16, 32]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Acosh",
      "opcode": 23,
      "operand_mapping": [
        "x"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"component_width" : {"operand" : "x", "allowed" : [16, 32]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Atanh",
      "opcode": 24,
      "operand_mapping": [
        "x"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"component_width" : {"operand" : "x", "allowed" : [16, 32]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Atan2",
      "opcode": 25,
      "operand_mapping": [
        "y",
        "x"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"type_constraint" : {"operand" : "y" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"base_type" : {"operand" : "y", "base_types" : ["FloatingPoint"]}},
        {"component_width" : {"operand" : "x", "allowed" : [16, 32]}},
        {"component_width" : {"operand" : "y", "allowed" : [16, 32]}},
        {"result_equal_type" : "x"},
        {"result_equal_type" : "y"}
      ]
    },
    {
      "opname": "Pow",
      "opcode": 26,
      "operand_mapping": [
        "x",
        "y"
      ],
      "rules": [        
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"type_constraint" : {"operand" : "y" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"base_type" : {"operand" : "y", "base_types" : ["FloatingPoint"]}},
        {"component_width" : {"operand" : "x", "allowed" : [16, 32]}},
        {"component_width" : {"operand" : "y", "allowed" : [16, 32]}},
        {"result_equal_type" : "x"},
        {"result_equal_type" : "y"}
      ]
    },
    {
      "opname": "Exp",
      "opcode": 27,
      "operand_mapping": [
        "x"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"component_width" : {"operand" : "x", "allowed" : [16, 32]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Log",
      "opcode": 28,
      "operand_mapping": [
        "x"
      ],
      "rules": [        
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"component_width" : {"operand" : "x", "allowed" : [16, 32]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Exp2",
      "opcode": 29,
      "operand_mapping": [
        "x"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"component_width" : {"operand" : "x", "allowed" : [16, 32]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Log2",
      "opcode": 30,
      "operand_mapping": [
        "x"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Sqrt",
      "opcode": 31,
      "operand_mapping": [
        "x"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "InverseSqrt",
      "opcode": 32,
      "operand_mapping": [
        "x"
      ],
      "rules": []
    },
    {
      "opname": "Determinant",
      "opcode": 33,
      "operand_mapping": [
        "x"
      ],
      "rules": []
    },
    {
      "opname": "MatrixInverse",
      "opcode": 34,
      "operand_mapping": [
        "x"
      ],
      "rules": []
    },
    {
      "opname": "Modf",
      "opcode": 35,
      "operand_mapping": [
        "x",
        "i"
      ],
      "rules": []
    },
    {
      "opname": "ModfStruct",
      "opcode": 36,
      "operand_mapping": [
        "x"
      ],
      "rules": []
    },
    {
      "opname": "FMin",
      "opcode": 37,
      "operand_mapping": [
        "x",
        "y"
      ],
      "rules": [        
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"type_constraint" : {"operand" : "y" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"base_type" : {"operand" : "y", "base_types" : ["FloatingPoint"]}},
        {"result_equal_type" : "x"},
        {"result_equal_type" : "y"}
      ]
    },
    {
      "opname": "UMin",
      "opcode": 38,
      "operand_mapping": [
        "x",
        "y"
      ],
      "rules": []
    },
    {
      "opname": "SMin",
      "opcode": 39,
      "operand_mapping": [
        "x",
        "y"
      ],
      "rules": []
    },
    {
      "opname": "FMax",
      "opcode": 40,
      "operand_mapping": [
        "x",
        "y"
      ],
      "rules": [        
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"type_constraint" : {"operand" : "y" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"base_type" : {"operand" : "y", "base_types" : ["FloatingPoint"]}},
        {"result_equal_type" : "x"},
        {"result_equal_type" : "y"}
      ]
    },
    {
      "opname": "UMax",
      "opcode": 41,
      "operand_mapping": [
        "x",
        "y"
      ],
      "rules": []
    },
    {
      "opname": "SMax",
      "opcode": 42,
      "operand_mapping": [
        "x",
        "y"
      ],
      "rules": []
    },
    {
      "opname": "FClamp",
      "opcode": 43,
      "operand_mapping": [
        "x",
        "minVal",
        "maxVal"
      ],
      "rules": [
        
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"type_constraint" : {"operand" : "minVal" , "ty" : ["Scalar", "Vector"]}},
        {"type_constraint" : {"operand" : "maxVal" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"base_type" : {"operand" : "minVal", "base_types" : ["FloatingPoint"]}},
        {"base_type" : {"operand" : "maxVal", "base_types" : ["FloatingPoint"]}},
        {"result_equal_type" : "x"},
        {"result_equal_type" : "minVal"},
        {"result_equal_type" : "maxVal"}
      ]
    },
    {
      "opname": "UClamp",
      "opcode": 44,
      "operand_mapping": [
        "x",
        "minVal",
        "maxVal"
      ],
      "rules": []
    },
    {
      "opname": "SClamp",
      "opcode": 45,
      "operand_mapping": [
        "x",
        "minVal",
        "maxVal"
      ],
      "rules": []
    },
    {
      "opname": "FMix",
      "opcode": 46,
      "operand_mapping": [
        "x",
        "y",
        "a"
      ],
      "rules": [        
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"type_constraint" : {"operand" : "y" , "ty" : ["Scalar", "Vector"]}},
        {"type_constraint" : {"operand" : "a" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"base_type" : {"operand" : "y", "base_types" : ["FloatingPoint"]}},
        {"base_type" : {"operand" : "a", "base_types" : ["FloatingPoint"]}},
        {"result_equal_type" : "x"},
        {"result_equal_type" : "y"},
        {"result_equal_type" : "a"}
      ]
    },
    {
      "opname": "IMix",
      "opcode": 47,
      "operand_mapping": [
        "x",
        "y",
        "a"
      ],
      "rules": []
    },
    {
      "opname": "Step",
      "opcode": 48,
      "operand_mapping": [
        "edge",
        "x"
      ],
      "rules": []
    },
    {
      "opname": "SmoothStep",
      "opcode": 49,
      "operand_mapping": [
        "edge0",
        "edge1",
        "x"
      ],
      "rules": []
    },
    {
      "opname": "Fma",
      "opcode": 50,
      "operand_mapping": [
        "a",
        "b",
        "c"
      ],
      "rules": []
    },
    {
      "opname": "Frexp",
      "opcode": 51,
      "operand_mapping": [
        "x",
        "exp"
      ],
      "rules": []
    },
    {
      "opname": "FrexpStruct",
      "opcode": 52,
      "operand_mapping": [
        "x"
      ],
      "rules": []
    },
    {
      "opname": "Ldexp",
      "opcode": 53,
      "operand_mapping": [
        "x",
        "exp"
      ],
      "rules": []
    },
    {
      "opname": "PackSnorm4x8",
      "opcode": 54,
      "operand_mapping": [
        "v"
      ],
      "rules": []
    },
    {
      "opname": "PackUnorm4x8",
      "opcode": 55,
      "operand_mapping": [
        "v"
      ],
      "rules": []
    },
    {
      "opname": "PackSnorm2x16",
      "opcode": 56,
      "operand_mapping": [
        "v"
      ],
      "rules": []
    },
    {
      "opname": "PackUnorm2x16",
      "opcode": 57,
      "operand_mapping": [
        "v"
      ],
      "rules": []
    },
    {
      "opname": "PackHalf2x16",
      "opcode": 58,
      "operand_mapping": [
        "v"
      ],
      "rules": []
    },
    {
      "opname": "PackDouble2x32",
      "opcode": 59,
      "operand_mapping": [
        "v"
      ],
      "rules": []
    },
    {
      "opname": "UnpackSnorm2x16",
      "opcode": 60,
      "operand_mapping": [
        "p"
      ],
      "rules": []
    },
    {
      "opname": "UnpackUnorm2x16",
      "opcode": 61,
      "operand_mapping": [
        "p"
      ],
      "rules": []
    },
    {
      "opname": "UnpackHalf2x16",
      "opcode": 62,
      "operand_mapping": [
        "v"
      ],
      "rules": []
    },
    {
      "opname": "UnpackSnorm4x8",
      "opcode": 63,
      "operand_mapping": [
        "p"
      ],
      "rules": []
    },
    {
      "opname": "UnpackUnorm4x8",
      "opcode": 64,
      "operand_mapping": [
        "p"
      ],
      "rules": []
    },
    {
      "opname": "UnpackDouble2x32",
      "opcode": 65,
      "operand_mapping": [
        "v"
      ],
      "rules": []
    },
    {
      "opname": "Length",
      "opcode": 66,
      "operand_mapping": [
        "x"
      ],
      "rules": [        
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "Distance",
      "opcode": 67,
      "operand_mapping": [
        "p0",
        "p1"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "p0" , "ty" : ["Scalar", "Vector"]}},
        {"type_constraint" : {"operand" : "p1" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "p0", "base_types" : ["FloatingPoint"]}},
        {"base_type" : {"operand" : "p1", "base_types" : ["FloatingPoint"]}},
        {"result_equal_type" : "p0"},
        {"result_equal_type" : "p1"}
      ]
    },
    {
      "opname": "Cross",
      "opcode": 68,
      "operand_mapping": [
        "x",
        "y"
      ],
      "rules": [
        {"type_constraint" : {"operand" : "x" , "ty" : ["Vector"]}},
        {"type_constraint" : {"operand" : "y" , "ty" : ["Vector"]}},
        {"component_count" : {"operand" : "x", "allowed" : [3]}},
        {"component_count" : {"operand" : "y", "allowed" : [3]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"base_type" : {"operand" : "y", "base_types" : ["FloatingPoint"]}},
        {"result_equal_type" : "x"},
        {"result_equal_type" : "y"}
      ]
    },
    {
      "opname": "Normalize",
      "opcode": 69,
      "operand_mapping": [
        "x"
      ],
      "rules": [        
        {"type_constraint" : {"operand" : "x" , "ty" : ["Scalar", "Vector"]}},
        {"base_type" : {"operand" : "x", "base_types" : ["FloatingPoint"]}},
        {"result_equal_type" : "x"}
      ]
    },
    {
      "opname": "FaceForward",
      "opcode": 70,
      "operand_mapping": [
        "N",
        "I",
        "Nref"
      ],
      "rules": []
    },
    {
      "opname": "Reflect",
      "opcode": 71,
      "operand_mapping": [
        "I",
        "N"
      ],
      "rules": []
    },
    {
      "opname": "Refract",
      "opcode": 72,
      "operand_mapping": [
        "I",
        "N",
        "eta"
      ],
      "rules": []
    },
    {
      "opname": "FindILsb",
      "opcode": 73,
      "operand_mapping": [
        "Value"
      ],
      "rules": []
    },
    {
      "opname": "FindSMsb",
      "opcode": 74,
      "operand_mapping": [
        "Value"
      ],
      "rules": []
    },
    {
      "opname": "FindUMsb",
      "opcode": 75,
      "operand_mapping": [
        "Value"
      ],
      "rules": []
    },
    {
      "opname": "InterpolateAtCentroid",
      "opcode": 76,
      "operand_mapping": [
        "interpolant"
      ],
      "rules": []
    },
    {
      "opname": "InterpolateAtSample",
      "opcode": 77,
      "operand_mapping": [
        "interpolant",
        "sample"
      ],
      "rules": []
    },
    {
      "opname": "InterpolateAtOffset",
      "opcode": 78,
      "operand_mapping": [
        "interpolant",
        "offset"
      ],
      "rules": []
    },
    {
      "opname": "NMin",
      "opcode": 79,
      "operand_mapping": [
        "x",
        "y"
      ],
      "rules": []
    },
    {
      "opname": "NMax",
      "opcode": 80,
      "operand_mapping": [
        "x",
        "y"
      ],
      "rules": []
    },
    {
      "opname": "NClamp",
      "opcode": 81,
      "operand_mapping": [
        "x",
        "minVal",
        "maxVal"
      ],
      "rules": []
    }
  ]
}
